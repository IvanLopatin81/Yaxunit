#Область СлужебныйПрограммныйИнтерфейс

Процедура ИсполняемыеСценарии() Экспорт
    
   ЮТТесты
  .ВТранзакции()  
 .ДобавитьТестовыйНабор("Создание и проведения документов и их движений")  
      .ДобавитьТест("ПроверкаУспешногоСозданияДокумента")   
      .Перед("ПодготовкаДанных").ВТранзакции()
       		.СПараметрами("Приход1")
       		.СПараметрами("Приход2")
       		.СПараметрами("Приход3") 
       		.СПараметрами("Расход1")
       		.СПараметрами("Расход2")
       		.СПараметрами("Расход3") 
      .ДобавитьТест("ПроверкаПроведенияДокумента") 
      .Перед("ПодготовкаДанных").ВТранзакции()
       		.СПараметрами("Приход1")
       		.СПараметрами("Приход2")
       		.СПараметрами("Приход3") 
       		.СПараметрами("Расход1")
       		.СПараметрами("Расход2")
       		.СПараметрами("Расход3") 
	  .ДобавитьТест("ПроверкаВыводаДвиженийВНоль") 
	  .Перед("ПодготовкаДанных")
	;
  
КонецПроцедуры      

Процедура ПодготовкаДанных() ЭКспорт
	
	ТестовыйТовар  =  СозданиеТовара("Тестовый товар"); 
	
	КонструкторСклада = ЮТест.Данные().КонструкторОбъекта("Справочники.Склады")
	.ФикцияОбязательныхПолей()	
	;
	ТестовыйСклад = КонструкторСклада.Записать(); 
	
	КонструкторКонтрагента = ЮТест.Данные().КонструкторОбъекта("Справочники.Контрагенты")
	.ФикцияОбязательныхПолей()	
	;
	ТестовыйКонтрагент = КонструкторКонтрагента.Записать(); 

	
	КонструкторВалюты = ЮТест.Данные().КонструкторОбъекта("Справочники.Валюты")
	.ФикцияОбязательныхПолей()	
	;
	ТестоваяВалюта = КонструкторВалюты.Записать(); 
	
	
	ЮТест.Контекст().УстановитьЗначение("Товар",  ТестовыйТовар);  
	
	Приход1 = СозданиеДокументаПриход(ТестовыйТовар, 10, 10, 100,ТестовыйСклад,ТестовыйКонтрагент,ТестоваяВалюта);
	Приход2 = СозданиеДокументаПриход(ТестовыйТовар, 10, 10, 100,ТестовыйСклад,ТестовыйКонтрагент,ТестоваяВалюта);
	Приход3 = СозданиеДокументаПриход(ТестовыйТовар, 10, 10, 100,ТестовыйСклад,ТестовыйКонтрагент,ТестоваяВалюта);  
	
	ЮТест.Контекст().УстановитьЗначение("Приход1",Приход1);
	ЮТест.Контекст().УстановитьЗначение("Приход2",Приход2);
	ЮТест.Контекст().УстановитьЗначение("Приход3",Приход3);
	
	
	ЮТест.Контекст().УстановитьЗначение("Расход1",СозданиеДокументаРасход(ТестовыйТовар, 10, 10, 100,ТестовыйСклад,Приход1));
	ЮТест.Контекст().УстановитьЗначение("Расход2",СозданиеДокументаРасход(ТестовыйТовар, 10, 10, 100,ТестовыйСклад,Приход2));
	ЮТест.Контекст().УстановитьЗначение("Расход3",СозданиеДокументаРасход(ТестовыйТовар, 10, 10, 100,ТестовыйСклад,Приход3));
	
	
КонецПроцедуры

Функция СозданиеТовара(Наименование)
	
		
	КонструкторТовара = ЮТест.Данные().КонструкторОбъекта("Справочники.Товары")
		.ФикцияОбязательныхПолей()
		.Установить("Вид", Перечисления.ВидыТоваров.Товар)
		.Установить("Наименование", Наименование)
		;
    ТоварНовый = КонструкторТовара.Записать();
	
	Возврат ТоварНовый;

КонецФункции

Функция СозданиеДокументаПриход(ТоварНовый, Цена, Количество, Сумма,Склад,Контрагент,Валюта)
	Попытка
		// Создание прихода
		КонструкторПрихода = ЮТест.Данные().КонструкторОбъекта("Документы.ПриходТовара")
		.ФикцияОбязательныхПолей()
		.ФикцияРеквизитов( "Организация") 
		.Установить("Валюта",Валюта)    
		.Установить("Склад",Склад)    
		.Установить("Поставщик",Контрагент)    
		.Установить("Дата", ТекущаяДатаСеанса() - 100)
		.ТабличнаяЧасть("Товары").ДобавитьСтроку()
		.Установить("Товар", ТоварНовый)
		.Установить("Цена", Цена)
		.Установить("Количество", Количество)
		.Установить("Сумма", Сумма)
		;
		
		ПриходТовара = КонструкторПрихода.Записать();  	
		Возврат ПриходТовара;
	Исключение
		Возврат Неопределено
	КонецПопытки
КонецФункции 

Функция СозданиеДокументаРасход(ТоварНовый, Цена, Количество, Сумма,Склад,ПриходТовара)
		Попытка
		// Создание расхода
		РасходТовара = ЮТест.Данные().КонструкторОбъекта("Документы.РасходТовара")
			.ФикцияОбязательныхПолей()
			.Установить("Дата", ТекущаяДатаСеанса())
			.Установить("Склад", ПриходТовара.Склад)
			.Установить("Валюта", ПриходТовара.Валюта)  
			.Установить("Покупатель", ПриходТовара.Поставщик)  
			.Установить("Организация", ПриходТовара.Организация)
			.ФикцияРеквизитов("ВидЦен, ОбоснованиеОтгрузки")
			.ТабличнаяЧасть("Товары").ДобавитьСтроку()
				.Установить("Товар", ТоварНовый)
				.Установить("Цена", Цена)
				.Установить("Количество", Количество)
				.Установить("Сумма", Сумма)
			.Записать() // формируем документ ссылку не проведенную
			;
			
		Возврат РасходТовара;
	Исключение
		
	Возврат  Неопределено;
		
		Конецпопытки
КонецФункции 

Процедура ПроверкаПроведенияДокумента(Документ) Экспорт
	
	ЮТест.ОжидаетЧто(ЮТест.Контекст().Значение(Документ).ПолучитьОбъект())  // Объект, метод которого проверяем
		.Метод("Записать").Параметр(РежимЗаписиДокумента.Проведение)   // Указываем проверяемый метод и параметры вызова
		.НеВыбрасываетИсключение()	
		;
		
	ЮТест.ОжидаетЧто(ЮТЗапросы.ДвиженияДокумента(ЮТест.Контекст().Значение(Документ), "Взаиморасчеты"))
		.Заполнено()
	;
	ЮТест.ОжидаетЧто(ЮТЗапросы.ДвиженияДокумента(ЮТест.Контекст().Значение(Документ), "ТоварныеЗапасы"))
		.Заполнено()
	;
КонецПроцедуры  

Процедура ПроверкаВыводаДвиженийВНоль() Экспорт
	
	ЮТест.Контекст().Значение("Приход1").ПолучитьОбъект().Записать(РежимЗаписиДокумента.Проведение);
	ЮТест.Контекст().Значение("Приход2").ПолучитьОбъект().Записать(РежимЗаписиДокумента.Проведение);
	ЮТест.Контекст().Значение("Приход3").ПолучитьОбъект().Записать(РежимЗаписиДокумента.Проведение);
	
	ЮТест.Контекст().Значение("Расход1").ПолучитьОбъект().Записать(РежимЗаписиДокумента.Проведение);
	ЮТест.Контекст().Значение("Расход2").ПолучитьОбъект().Записать(РежимЗаписиДокумента.Проведение);
	ЮТест.Контекст().Значение("Расход3").ПолучитьОбъект().Записать(РежимЗаписиДокумента.Проведение);
	
	ОписаниеЗапроса = ЮТЗапросы.ОписаниеЗапроса();
	ОписаниеЗапроса.ИмяТаблицы = "РегистрНакопления.Взаиморасчеты.Остатки";
	ОписаниеЗапроса.Условия.Добавить("Валюта = &Валюта");  
	ОписаниеЗапроса.Условия.Добавить("Контрагент= &Контрагент");
	ОписаниеЗапроса.ЗначенияПараметров.Вставить("Валюта", ЮТест.Контекст().Значение("Приход1").Валюта);  
	ОписаниеЗапроса.ЗначенияПараметров.Вставить("Контрагент", ЮТест.Контекст().Значение("Приход1").Поставщик);  
	ОписаниеЗапроса.ВыбираемыеПоля.Добавить("СуммаОстаток");
	//
	ЮТест.ОжидаетЧто(ЮТЗапросы.РезультатЗапроса(ОписаниеЗапроса))
	.ИмеетДлину(0); 
	
	
	
	ОписаниеЗапроса = ЮТЗапросы.ОписаниеЗапроса();
	ОписаниеЗапроса.ИмяТаблицы = "РегистрНакопления.ТоварныеЗапасы.Остатки";
	ОписаниеЗапроса.Условия.Добавить("Товар = &Товар");  
	ОписаниеЗапроса.Условия.Добавить("Склад= &Склад");
	ОписаниеЗапроса.ЗначенияПараметров.Вставить("Склад", ЮТест.Контекст().Значение("Приход1").Склад);  
	ОписаниеЗапроса.ЗначенияПараметров.Вставить("Товар", ЮТест.Контекст().Значение("Приход1").Товары[0].Товар);  
	ОписаниеЗапроса.ВыбираемыеПоля.Добавить("КоличествоОстаток");
	//
	ЮТест.ОжидаетЧто(ЮТЗапросы.РезультатЗапроса(ОписаниеЗапроса))
	.ИмеетДлину(0);
	
КонецПроцедуры

Процедура ПроверкаУспешногоСозданияДокумента(Документ) Экспорт
	
	ЮТест.ОжидаетЧто(ЮТест.Контекст().Значение(Документ))  // Объект, метод которого проверяем
		.НеРавно(Неопределено)	
		;

КонецПроцедуры


#КонецОбласти
